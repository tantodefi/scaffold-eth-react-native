{
  "address": "0xE82d364146B709CFe879DFB70f2386971C3F3338",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Belt",
          "name": "belt",
          "type": "tuple"
        }
      ],
      "name": "renderTokenById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Belt",
          "name": "belt",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x03fb4341f84a198088f8dea714d604662e45a5bf670adb41299fd325dd4a07cc",
  "receipt": {
    "to": null,
    "from": "0x7a82bbfD10E3Ce5817dEcC0ee870e17D6853D901",
    "contractAddress": "0xE82d364146B709CFe879DFB70f2386971C3F3338",
    "transactionIndex": 6,
    "gasUsed": "564147",
    "logsBloom": "0x
    "blockHash": "0xde12d61975cf7ae6d5a964cedc8e3495211f1d35c0784e32d27b051b24b07d90",
    "transactionHash": "0x03fb4341f84a198088f8dea714d604662e45a5bf670adb41299fd325dd4a07cc",
    "logs": [],
    "blockNumber": 5668184,
    "cumulativeGasUsed": "3580919",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b96a574724eef3f8c3d467b0f1e28008",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Belt\",\"name\":\"belt\",\"type\":\"tuple\"}],\"name\":\"renderTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Belt\",\"name\":\"belt\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/metadata/BeltMetadata.sol\":\"BeltMetadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/dependencies/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    unchecked {\\n      uint256 length = Math.log10(value) + 1;\\n      string memory buffer = new string(length);\\n      uint256 ptr;\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        ptr := add(buffer, add(32, length))\\n      }\\n      while (true) {\\n        ptr--;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n        }\\n        value /= 10;\\n        if (value == 0) break;\\n      }\\n      return buffer;\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(int256 value) internal pure returns (string memory) {\\n    return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    unchecked {\\n      return toHexString(value, Math.log256(value) + 1);\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n\\n  /**\\n   * @dev Returns true if the two strings are equal.\\n   */\\n  function equal(string memory a, string memory b) internal pure returns (bool) {\\n    return keccak256(bytes(a)) == keccak256(bytes(b));\\n  }\\n}\\n\",\"keccak256\":\"0x28fe83522fe04cbcf50a79565ee852ca013759e77956a04cf882d936954fae08\",\"license\":\"MIT\"},\"contracts/libraries/logic/metadata/BeltMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {Strings} from \\\"../../../dependencies/Strings.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\n\\nimport {DataTypes} from \\\"../../types/DataTypes.sol\\\";\\nimport {TokenURIGen} from \\\"../../utils/TokenURIGen.sol\\\";\\nimport {TypeCast} from \\\"../../utils/TypeCast.sol\\\";\\n\\nlibrary BeltMetadata {\\n  using Strings for uint256;\\n\\n  function tokenURI(DataTypes.Belt calldata belt, uint256 tokenId) external pure returns (string memory) {\\n    string memory name = string(abi.encodePacked(\\\"Belt#\\\", tokenId.toString()));\\n    string memory description = string(abi.encodePacked(\\\"This is a belt colored #\\\", belt.color));\\n    string memory image = Base64.encode(bytes(generateSVG(belt)));\\n\\n    return TokenURIGen.generateSVGTokenURI(name, description, image);\\n  }\\n\\n  function renderTokenById(DataTypes.Belt calldata belt) public pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<path d=\\\"M659.486 768.674C712.328 793.762 877.834 783.727 916.718 768.674C955.602 753.622 916.718 809.818 916.718 809.818C821.372 840.676 765.505 843.417 659.486 809.818C659.486 809.818 606.643 743.587 659.486 768.674Z\\\" fill=\\\"',\\n          belt.color,\\n          '\\\" />'\\n        )\\n      );\\n  }\\n\\n  function generateSVG(DataTypes.Belt calldata belt) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 1453 1274\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n          renderTokenById(belt),\\n          \\\"</svg>\\\"\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x569febf699f99896e928ff931e59cd0cd1d4a69b9048dc5220a458c88cbde4e7\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary DataTypes {\\n  enum AccessoryPosition {\\n    Foreground,\\n    Background\\n  }\\n\\n  struct Accessory {\\n    address _address;\\n    AccessoryPosition position;\\n  }\\n\\n  struct Snowman {\\n    int256 eyeOffsetX;\\n    int256 eyeOffsetY;\\n    string cloudColor;\\n    string buttonColor;\\n    int256 snowAnimOffsetX;\\n  }\\n\\n  struct Hat {\\n    string color;\\n  }\\n\\n  struct Scarf {\\n    string color;\\n  }\\n\\n  struct Belt {\\n    string color;\\n  }\\n}\\n\",\"keccak256\":\"0x314f787fec39584c6426fb083fe708b4cd73b0f9df7bac896ed2b836ebf2fe9b\",\"license\":\"MIT\"},\"contracts/libraries/utils/TokenURIGen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\n\\nlibrary TokenURIGen {\\n  function generateSVGTokenURI(\\n    string calldata name,\\n    string calldata description,\\n    string calldata image\\n  ) external pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:applicaton/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                '\\\", \\\"description\\\": \\\"',\\n                description,\\n                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function generateSVGTokenURI(\\n    string calldata name,\\n    string calldata description,\\n    string calldata image,\\n    string calldata attributes\\n  ) external pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:applicaton/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                '\\\", \\\"description\\\": \\\"',\\n                description,\\n                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                image,\\n                '\\\", \\\"attributes\\\": ',\\n                attributes,\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function generateSVGTokenURI(\\n    string calldata name,\\n    string calldata description,\\n    string calldata external_url,\\n    string calldata image,\\n    string calldata attributes\\n  ) external pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:applicaton/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                '\\\", \\\"description\\\": \\\"',\\n                description,\\n                '\\\", \\\"external_url\\\": \\\"',\\n                external_url,\\n                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                image,\\n                '\\\", \\\"attributes\\\": ',\\n                attributes,\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x58db6115126e913c6eba19e5a598b39f4b858bf0488b5f94a807965467d43361\",\"license\":\"MIT\"},\"contracts/libraries/utils/TypeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nerror TypeCast__toUint256_OutOfBounds();\\n\\nlibrary TypeCast {\\n  bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = ALPHABET[value & 0xf];\\n      value >>= 4;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toColor(bytes3 value) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(6);\\n    for (uint256 i = 0; i < 3; i++) {\\n      buffer[i * 2 + 1] = ALPHABET[uint8(value[i]) & 0xf];\\n      buffer[i * 2] = ALPHABET[uint8(value[i] >> 4) & 0xf];\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toUint256(bytes memory _bytes) internal pure returns (uint256) {\\n    if (_bytes.length < 32) revert TypeCast__toUint256_OutOfBounds();\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(_bytes, 0x20))\\n    }\\n\\n    return tempUint;\\n  }\\n}\\n\",\"keccak256\":\"0xd4fdff1d01244722fc086ae66e7b05ea4885e0dcd4bc94747d931445d883e259\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a5761093c9081610020823930815050f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c806344813cca1461018c5763d50788501461003657600080fd5b806003193601126101885782823567ffffffffffffffff81116101845761006361009591369086016101d3565b9361011f61010761010261007860243561059d565b87516442656c742360d81b60208201529586916025830190610242565b03976100a9601f19998a810188528761026f565b6100fd6100b68280610296565b8a517f5468697320697320612062656c7420636f6c6f7265642023000000000000000060208201529b918c916100f1919060388401916102c9565b039081018b528a61026f565b61083e565b6104aa565b8551636e14931f60e11b815296879485948501610352565b03817325895db657F15381181c0C1022CA8b217E4b14985af491821561017f5783610156949361015a575b5050519182918261022e565b0390f35b6101779293503d8091833e61016f818361026f565b8101906102f3565b90388061014a565b610389565b5080fd5b8280fd5b508260203660031901126101d05782359067ffffffffffffffff82116101d057506101c0610156936101c5923691016101d3565b6106e0565b90519182918261022e565b80fd5b908160209103126101e15790565b600080fd5b60005b8381106101f95750506000910152565b81810151838201526020016101e9565b90602091610222815180928185528580860191016101e6565b601f01601f1916010190565b90602061023f928181520190610209565b90565b90610255602092828151948592016101e6565b0190565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761029157604052565b610259565b903590601e19813603018212156101e1570180359067ffffffffffffffff82116101e1576020019181360383136101e157565b908092918237016000815290565b67ffffffffffffffff811161029157601f01601f191660200190565b6020818303126101e15780519067ffffffffffffffff82116101e1570181601f820112156101e1578051610326816102d7565b92610334604051948561026f565b818452602082840101116101e15761023f91602080850191016101e6565b9161037b9061036d61023f9593606086526060860190610209565b908482036020860152610209565b916040818403910152610209565b6040513d6000823e3d90fd5b604051906020820182811067ffffffffffffffff8211176102915760405260008252565b604051906060820182811067ffffffffffffffff82111761029157604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b634e487b7160e01b600052601160045260246000fd5b906002820180921161044d57565b610429565b906020820180921161044d57565b600281901b91906001600160fe1b0381160361044d57565b90610482826102d7565b61048f604051918261026f565b82815280926104a0601f19916102d7565b0190602036910137565b805115610594576104b96103b9565b6104d56104d06104c9845161043f565b6003900490565b610460565b916104e76104e284610452565b610478565b92835280815182019060208501935b8282106105385750505060039051068060011461052757600214610518575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b90919360049060038094019384516001603f81818460121c16880101519260f893841b8652828282600c1c1689010151841b8387015282828260061c1689010151841b60028701521686010151901b90820152019391906104f6565b5061023f610395565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156106d2575b506d04ee2d6d415b85acef8100000000808310156106c3575b50662386f26fc10000808310156106b4575b506305f5e100808310156106a5575b5061271080831015610696575b506064821015610686575b600a8092101561067c575b600190816021610634828701610478565b95860101905b610646575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156106775791908261063a565b61063f565b9160010191610623565b9190606460029104910191610618565b6004919392049101913861060d565b60089193920491019138610600565b601091939204910191386105f1565b602091939204910191386105df565b6040935081049150386105c6565b6106ed61023f9180610296565b6108306040939293519384927f3c7061746820643d224d3635392e343836203736382e363734433731322e333260208501527f38203739332e373632203837372e383334203738332e373237203931362e373160408501527f38203736382e363734433935352e363032203735332e363232203931362e373160608501527f38203830392e383138203931362e373138203830392e383138433832312e333760808501527f32203834302e363736203736352e353035203834332e343137203635392e343860a08501527f36203830392e383138433635392e343836203830392e383138203630362e363460c08501527f33203734332e353837203635392e343836203736382e3637345a222066696c6c60e0850152611e9160f11b610100850152806101029283860137631110179f60e11b9084019190910190815260040190565b03601f19810183528261026f565b610847906106e0565b61023f608d60405180937f3c7376672077696474683d223130302522206865696768743d2231303025222060208301527f76696577426f783d2230203020313435332031323734222066696c6c3d226e6f60408301527f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230306060830152661817b9bb33911f60c91b60808301526108e78151809260206087860191016101e6565b8101651e17b9bb339f60d11b608782015203606d81018452018261026f56fea26469706673582212205e8a5cc11cdfc4f36a2d8c70f999eb4b4d27ebf38852e5867cfd5246b9c1129264736f6c63430008120033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c806344813cca1461018c5763d50788501461003657600080fd5b806003193601126101885782823567ffffffffffffffff81116101845761006361009591369086016101d3565b9361011f61010761010261007860243561059d565b87516442656c742360d81b60208201529586916025830190610242565b03976100a9601f19998a810188528761026f565b6100fd6100b68280610296565b8a517f5468697320697320612062656c7420636f6c6f7265642023000000000000000060208201529b918c916100f1919060388401916102c9565b039081018b528a61026f565b61083e565b6104aa565b8551636e14931f60e11b815296879485948501610352565b038173__$630b07a2e356e58e1839af623d98555940$__5af491821561017f5783610156949361015a575b5050519182918261022e565b0390f35b6101779293503d8091833e61016f818361026f565b8101906102f3565b90388061014a565b610389565b5080fd5b8280fd5b508260203660031901126101d05782359067ffffffffffffffff82116101d057506101c0610156936101c5923691016101d3565b6106e0565b90519182918261022e565b80fd5b908160209103126101e15790565b600080fd5b60005b8381106101f95750506000910152565b81810151838201526020016101e9565b90602091610222815180928185528580860191016101e6565b601f01601f1916010190565b90602061023f928181520190610209565b90565b90610255602092828151948592016101e6565b0190565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761029157604052565b610259565b903590601e19813603018212156101e1570180359067ffffffffffffffff82116101e1576020019181360383136101e157565b908092918237016000815290565b67ffffffffffffffff811161029157601f01601f191660200190565b6020818303126101e15780519067ffffffffffffffff82116101e1570181601f820112156101e1578051610326816102d7565b92610334604051948561026f565b818452602082840101116101e15761023f91602080850191016101e6565b9161037b9061036d61023f9593606086526060860190610209565b908482036020860152610209565b916040818403910152610209565b6040513d6000823e3d90fd5b604051906020820182811067ffffffffffffffff8211176102915760405260008252565b604051906060820182811067ffffffffffffffff82111761029157604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b634e487b7160e01b600052601160045260246000fd5b906002820180921161044d57565b610429565b906020820180921161044d57565b600281901b91906001600160fe1b0381160361044d57565b90610482826102d7565b61048f604051918261026f565b82815280926104a0601f19916102d7565b0190602036910137565b805115610594576104b96103b9565b6104d56104d06104c9845161043f565b6003900490565b610460565b916104e76104e284610452565b610478565b92835280815182019060208501935b8282106105385750505060039051068060011461052757600214610518575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b90919360049060038094019384516001603f81818460121c16880101519260f893841b8652828282600c1c1689010151841b8387015282828260061c1689010151841b60028701521686010151901b90820152019391906104f6565b5061023f610395565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156106d2575b506d04ee2d6d415b85acef8100000000808310156106c3575b50662386f26fc10000808310156106b4575b506305f5e100808310156106a5575b5061271080831015610696575b506064821015610686575b600a8092101561067c575b600190816021610634828701610478565b95860101905b610646575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156106775791908261063a565b61063f565b9160010191610623565b9190606460029104910191610618565b6004919392049101913861060d565b60089193920491019138610600565b601091939204910191386105f1565b602091939204910191386105df565b6040935081049150386105c6565b6106ed61023f9180610296565b6108306040939293519384927f3c7061746820643d224d3635392e343836203736382e363734433731322e333260208501527f38203739332e373632203837372e383334203738332e373237203931362e373160408501527f38203736382e363734433935352e363032203735332e363232203931362e373160608501527f38203830392e383138203931362e373138203830392e383138433832312e333760808501527f32203834302e363736203736352e353035203834332e343137203635392e343860a08501527f36203830392e383138433635392e343836203830392e383138203630362e363460c08501527f33203734332e353837203635392e343836203736382e3637345a222066696c6c60e0850152611e9160f11b610100850152806101029283860137631110179f60e11b9084019190910190815260040190565b03601f19810183528261026f565b610847906106e0565b61023f608d60405180937f3c7376672077696474683d223130302522206865696768743d2231303025222060208301527f76696577426f783d2230203020313435332031323734222066696c6c3d226e6f60408301527f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230306060830152661817b9bb33911f60c91b60808301526108e78151809260206087860191016101e6565b8101651e17b9bb339f60d11b608782015203606d81018452018261026f56fea26469706673582212205e8a5cc11cdfc4f36a2d8c70f999eb4b4d27ebf38852e5867cfd5246b9c1129264736f6c63430008120033",
  "libraries": {
    "TokenURIGen": "0x25895db657F15381181c0C1022CA8b217E4b1498"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}