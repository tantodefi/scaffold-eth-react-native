{
  "address": "0x88dB9e47d866DF27822912eB2395B6DC18B4513a",
  "abi": [
    {
      "inputs": [],
      "name": "Snowman__AccessoryNotWorn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Snowman__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Snowman__UnavailableAccessory",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "accessories",
          "type": "address[]"
        }
      ],
      "name": "AccessoriesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "enum DataTypes.AccessoryPosition",
              "name": "position",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.Accessory[]",
          "name": "accessories",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snowmanId",
          "type": "uint256"
        }
      ],
      "name": "AccessoriesRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessory",
          "type": "address"
        }
      ],
      "name": "AccessoryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snowmanId",
          "type": "uint256"
        }
      ],
      "name": "AccessoryRemoved",
      "type": "event"
    }
  ],
  "transactionHash": "0x085712afb2f35213b387ffcc298371f7012547ac40bc5630efd1c4f4c6e16cd0",
  "receipt": {
    "to": null,
    "from": "0x7a82bbfD10E3Ce5817dEcC0ee870e17D6853D901",
    "contractAddress": "0x88dB9e47d866DF27822912eB2395B6DC18B4513a",
    "transactionIndex": 29,
    "gasUsed": "389042",
    "logsBloom": "0x
    "blockHash": "0x2d9fb9587113249b4bce17a1ac72901673237ca9a9adcd216b7c5904e8adc06e",
    "transactionHash": "0x085712afb2f35213b387ffcc298371f7012547ac40bc5630efd1c4f4c6e16cd0",
    "logs": [],
    "blockNumber": 5668176,
    "cumulativeGasUsed": "3846869",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b96a574724eef3f8c3d467b0f1e28008",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Snowman__AccessoryNotWorn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Snowman__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Snowman__UnavailableAccessory\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accessories\",\"type\":\"address[]\"}],\"name\":\"AccessoriesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum DataTypes.AccessoryPosition\",\"name\":\"position\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.Accessory[]\",\"name\":\"accessories\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snowmanId\",\"type\":\"uint256\"}],\"name\":\"AccessoriesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessory\",\"type\":\"address\"}],\"name\":\"AccessoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snowmanId\",\"type\":\"uint256\"}],\"name\":\"AccessoryRemoved\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/AccessoryManager.sol\":\"AccessoryManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface Errors {\\n  error Snowman__InvalidMintFee();\\n  error Snowman__NoFeesAvailable();\\n  error Snowman__NotMinted();\\n  error Snowman__NotEnoughEth();\\n  error Snowman__WithdrawalFailed();\\n  error Snowman__ZeroAddress();\\n  error Snowman__InvalidFeeCollector();\\n  error Snowman__CannotWearAccessory();\\n  error Snowman__AccessoryAlreadyWorn();\\n  error Snowman__NotAccessoryOwner();\\n  error Snowman__AcccessoryAlreadyExists();\\n  error Snowman__AccessoryNotWorn();\\n  error Snowman__NotOwner();\\n  error Snowman__UnavailableAccessory();\\n  error Snowman__NoAccessories();\\n  error Snowman__AccessoriesCountMismatch();\\n}\\n\",\"keccak256\":\"0x3434832f80480c673d656efe999be18d8d343921e1a4105c0dea21ef4078d0c2\",\"license\":\"MIT\"},\"contracts/interfaces/ISnowman.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\ninterface ISnowman is IERC721Enumerable {\\n  /**\\n   *\\n   * @notice Emitted when an accessory has been added\\n   * @dev Accessory can only be added by contract owner\\n   * @param accessory Address of accessory\\n   */\\n  event AccessoryAdded(address accessory);\\n\\n  /**\\n   *\\n   * @notice Emitted when multiple accessories have been added\\n   * @dev Accessories can only be added by contract owner\\n   * @param accessories Address of accessories\\n   */\\n  event AccessoriesAdded(address[] accessories);\\n\\n  /**\\n   *\\n   * @notice Emitted when an accessory is removed from a Snowman\\n   * @dev Accessory can only be removed by the Snowman owner\\n   * @param accessory Address of accessory removed\\n   * @param snowmanId Id of Snowman with accessory\\n   */\\n  event AccessoryRemoved(address accessory, uint256 snowmanId);\\n\\n  /**\\n   *\\n   * @notice Emitted when an accessory is removed from a Snowman\\n   * @dev Accessories can only be removed by the Snowman owner\\n   * @param accessories Accessories removed\\n   * @param snowmanId Id of Snowman with accessories\\n   */\\n  event AccessoriesRemoved(DataTypes.Accessory[] accessories, uint256 snowmanId);\\n\\n  /**\\n   *\\n   * @notice Emitted when fees are withdrawn\\n   * @param amount Amount of fees withdrawn\\n   */\\n  event FeesWithdrawn(uint256 amount);\\n\\n  /**\\n   *\\n   * @notice Mints one snowman with dynamic attributes for 0.02 ETH\\n   */\\n  function mint() external payable returns (uint256);\\n\\n  /**\\n   *\\n   * @notice Adds an accessory to Snowman for composition by Snowman owners\\n   * @dev Can only be added by contract owner\\n   * @param accessory Address of accessory\\n   * @param position Determines which position(Foreground or Background) to place the accessory\\n   */\\n  function addAccessory(address accessory, DataTypes.AccessoryPosition position) external;\\n\\n  /**\\n   *\\n   * @notice Removes an accessory from a Snowman\\n   * @dev Can only be removed by the Snowman owner\\n   * @param accessory Address of accessory\\n   * @param snowmanId Id of Snowman to remove accessory from\\n   */\\n  function removeAccessory(address accessory, uint256 snowmanId) external;\\n\\n  /**\\n   *\\n   * @notice Removes all accessories from a Snowman\\n   * @dev Can only be removed by the Snowman owner\\n   * @param snowmanId Id of snowman to remove all accessories from\\n   */\\n  function removeAllAccessories(uint256 snowmanId) external;\\n\\n  /**\\n   * @notice Withdraws mint fees to fee collector's account\\n   * @dev Anyone can call this function\\n   */\\n  function withdrawFees() external;\\n\\n  /**\\n   *\\n   * @notice Returns `true` if an accessory has been added to a Snowman and `false` otherwise\\n   * @param accessory Address of accessory\\n   * @param snowmanId Id of Snowman to check\\n   */\\n  function hasAccessory(address accessory, uint256 snowmanId) external view returns (bool);\\n\\n  /**\\n   *\\n   * @notice Returns the id of accessory added to a snowman\\n   * @param accessory Address of accessory\\n   * @param snowmanId Id of Snowman\\n   */\\n  function accessoryId(address accessory, uint256 snowmanId) external view returns (uint256);\\n\\n  /**\\n   *\\n   * @notice Returns the token URI of Snowman\\n   * @param tokenId Id of Snowman\\n   */\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n  /**\\n   *\\n   * @notice Returns the SVG image of Snowman\\n   * @param tokenId Id of Snowman\\n   */\\n  function renderTokenById(uint256 tokenId) external view returns (string memory);\\n\\n  /**\\n   *\\n   * @notice Sets a new mint fee collector\\n   * @param newFeeCollector Address of new fee collector\\n   */\\n  function setFeeCollector(address newFeeCollector) external;\\n\\n  /**\\n   *\\n   * @notice Retrieves the current mint fee collector\\n   */\\n  function getFeeCollector() external view returns (address);\\n\\n  /**\\n   *\\n   * @notice Retrieves all accessories\\n   */\\n  function getAccessories() external view returns (DataTypes.Accessory[] memory);\\n\\n  /**\\n   *\\n   * @notice Returns `true` if accessory is available for composition and `false` otherwise\\n   * @dev The contract owner determines if accessory is available or not\\n   * @param accessory Address of accessory\\n   */\\n  function isAccessoryAvailable(address accessory) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0c0b469a8d4477d050513eae5923cdbed1187a77a0f8915c3c362688981333e4\",\"license\":\"MIT\"},\"contracts/libraries/logic/AccessoryManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\nimport {ISnowman} from \\\"../../interfaces/ISnowman.sol\\\";\\nimport {Errors} from \\\"../../interfaces/Errors.sol\\\";\\n\\nabstract contract Accessory {\\n  function renderTokenById(uint256 id) external view virtual returns (string memory);\\n\\n  function transferFrom(address from, address to, uint256 id) external virtual;\\n}\\n\\nlibrary AccessoryManager {\\n  event AccessoryAdded(address accessory);\\n  event AccessoriesAdded(address[] accessories);\\n  event AccessoryRemoved(address accessory, uint256 snowmanId);\\n  event AccessoriesRemoved(DataTypes.Accessory[] accessories, uint256 snowmanId);\\n\\n  function addAccessory(\\n    mapping(address => bool) storage s_accessoriesAvailable,\\n    DataTypes.Accessory[] storage s_accessories,\\n    address accessory,\\n    DataTypes.AccessoryPosition position\\n  ) internal {\\n    if (s_accessoriesAvailable[accessory]) revert Errors.Snowman__AcccessoryAlreadyExists();\\n\\n    s_accessoriesAvailable[accessory] = true;\\n    s_accessories.push(DataTypes.Accessory(accessory, position));\\n\\n    emit AccessoryAdded(accessory);\\n  }\\n\\n  function addAccessories(\\n    mapping(address => bool) storage s_accessoriesAvailable,\\n    DataTypes.Accessory[] storage s_accessories,\\n    address[] calldata accessories,\\n    DataTypes.AccessoryPosition[] calldata positions\\n  ) internal {\\n    uint256 totalAccessories = accessories.length;\\n    uint256 totalPositions = positions.length;\\n\\n    if (totalAccessories == 0) revert Errors.Snowman__NoAccessories();\\n    if (totalAccessories != totalPositions) revert Errors.Snowman__AccessoriesCountMismatch();\\n\\n    for (uint256 i = 0; i < totalAccessories; i++) {\\n      addAccessory(s_accessoriesAvailable, s_accessories, accessories[i], positions[i]);\\n    }\\n\\n    emit AccessoriesAdded(accessories);\\n  }\\n\\n  function removeAccessory(\\n    mapping(address => bool) storage s_accessoriesAvailable,\\n    mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n    address accessory,\\n    uint256 snowmanId\\n  ) public {\\n    if (ISnowman(address(this)).ownerOf(snowmanId) != msg.sender) revert Errors.Snowman__NotOwner();\\n    if (!hasAccessory(s_accessoriesAvailable, s_accessoriesById, accessory, snowmanId))\\n      revert Errors.Snowman__AccessoryNotWorn();\\n\\n    _removeAccessory(s_accessoriesById, accessory, snowmanId);\\n\\n    emit AccessoryRemoved(accessory, snowmanId);\\n  }\\n\\n  function removeAllAccessories(\\n    DataTypes.Accessory[] calldata accessories,\\n    mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n    uint256 snowmanId\\n  ) public {\\n    if (msg.sender != ISnowman(address(this)).ownerOf(snowmanId)) revert Errors.Snowman__NotOwner();\\n\\n    uint256 totalAccessories = accessories.length;\\n    // remove all accessories from snowman\\n    for (uint i = 0; i < totalAccessories; i++) {\\n      if (s_accessoriesById[accessories[i]._address][snowmanId] > 0) {\\n        _removeAccessory(s_accessoriesById, accessories[i]._address, snowmanId);\\n      }\\n    }\\n\\n    emit AccessoriesRemoved(accessories, snowmanId);\\n  }\\n\\n  function _removeAccessory(\\n    mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n    address accessory,\\n    uint256 snowmanId\\n  ) internal {\\n    Accessory(accessory).transferFrom(\\n      address(this),\\n      ISnowman(address(this)).ownerOf(snowmanId),\\n      s_accessoriesById[accessory][snowmanId]\\n    );\\n\\n    s_accessoriesById[accessory][snowmanId] = 0;\\n  }\\n\\n  function hasAccessory(\\n    mapping(address => bool) storage s_accessoriesAvailable,\\n    mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n    address accessory,\\n    uint256 snowmanId\\n  ) public view returns (bool) {\\n    if (!s_accessoriesAvailable[accessory]) revert Errors.Snowman__UnavailableAccessory();\\n\\n    return (s_accessoriesById[accessory][snowmanId] != 0);\\n  }\\n\\n  function accessoryId(\\n    mapping(address => bool) storage s_accessoriesAvailable,\\n    mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n    address accessory,\\n    uint256 snowmanId\\n  ) public view returns (uint256) {\\n    if (!s_accessoriesAvailable[accessory]) revert Errors.Snowman__UnavailableAccessory();\\n\\n    return s_accessoriesById[accessory][snowmanId];\\n  }\\n}\\n\",\"keccak256\":\"0x8d7dae18ac3ac759dbb9717afb1e49aed474041b82db4da9730e8be6b4aad6eb\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary DataTypes {\\n  enum AccessoryPosition {\\n    Foreground,\\n    Background\\n  }\\n\\n  struct Accessory {\\n    address _address;\\n    AccessoryPosition position;\\n  }\\n\\n  struct Snowman {\\n    int256 eyeOffsetX;\\n    int256 eyeOffsetY;\\n    string cloudColor;\\n    string buttonColor;\\n    int256 snowAnimOffsetX;\\n  }\\n\\n  struct Hat {\\n    string color;\\n  }\\n\\n  struct Scarf {\\n    string color;\\n  }\\n\\n  struct Belt {\\n    string color;\\n  }\\n}\\n\",\"keccak256\":\"0x314f787fec39584c6426fb083fe708b4cd73b0f9df7bac896ed2b836ebf2fe9b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c57610612908161002282393081600a0152f35b600080fdfe6080604090808252307f000000000000000000000000000000000000000000000000000000000000000014916004928336101561003b57600080fd5b600092833560e01c9081638bb7f7c61461037557508063c3b5cb4e14610354578063c6ebe1a3146102705763efa987291461007557600080fd5b61026c57606036600319011261026c5782359267ffffffffffffffff908185116102685736602386011215610268578481013591821161026857602491828601958336918360061b01011161026457823593604435938151956331a9108f60e11b8752858588015260209485888481305afa97881561025a57899861022b575b506001600160a01b03978816330361021d5788979493975b8a8a8683106101a057505050505050845194818187018288525260608601979287905b83821061016757887f7d0eb853e07ab2fb5eb178a43b1fdd8178a2dfd823ab86e5443d9d9d1f20790b89808d8b8b8301520390a180f35b9091929398893582811680910361019c578152858a0135600281101561019c5786820152830198830193929160010190610130565b8980fd5b86828c8c938b9e9a9b6101bd6101b88987819a610452565b610478565b168152888d528181208582528d5220546101fd575b5050505060001981146101eb576001019794939761010d565b634e487b7160e01b8a5260118252838afd5b6102149361020e926101b892610452565b8561048c565b8088878d6101d2565b83516359bc8af160e01b8152fd5b61024c919850863d8811610253575b61024481836103fb565b810190610433565b96386100f5565b503d61023a565b84513d8b823e3d90fd5b8480fd5b8380fd5b5080fd5b5061026c5761027e366103c8565b91958493919351916331a9108f60e11b83528382840152602083602481305afa92831561034a57879361032a575b506001600160a01b0392339084160361031b578385896102cb9361058b565b1561030d57506102fe82847f9517d54ef4f3dd671db94f2d957775bbe942fe549a8b9d3eb24e333629fc81c6979861048c565b8351921682526020820152a180f35b845163057d474760e51b8152fd5b5084516359bc8af160e01b8152fd5b61034391935060203d81116102535761024481836103fb565b91386102ac565b86513d89823e3d90fd5b60208361036c610363366103c8565b9291909161058b565b90519015158152f35b83868692610382366103c8565b9491939060018060a01b03169283885260205260ff8688205416156103bc5782875260208481528688208689528152868820548751908152f35b6394cd5abb60e01b8152fd5b60809060031901126103f65760043590602435906044356001600160a01b03811681036103f6579060643590565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761041d57604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126103f657516001600160a01b03811681036103f65790565b91908110156104625760061b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036103f65790565b604080516331a9108f60e11b8152600481018590526000949193919260209290916001600160a01b03918216918482602481305afa918215610581578892610562575b5082885283855286882086895285528688205490833b1561055e5787516323b872dd60e01b8152306004820152921660248301526044820152868160648183865af1801561034a5761052f575b5060005281528260002091845252812055565b67ffffffffffffffff819792971161054a578552943861051c565b634e487b7160e01b82526041600452602482fd5b8880fd5b61057a919250853d87116102535761024481836103fb565b90386104cf565b87513d8a823e3d90fd5b6001600160a01b03909216600081815260209390935260408320549093919060ff16156105ca5760409383526020528282209082526020522054151590565b6040516394cd5abb60e01b8152600490fdfea26469706673582212201cbb9f1028f64408aee06ee7d5121c44646befb1b5fcfc2ee5875719d16038ba64736f6c63430008120033",
  "deployedBytecode": "0x6080604090808252307f000000000000000000000000000000000000000000000000000000000000000014916004928336101561003b57600080fd5b600092833560e01c9081638bb7f7c61461037557508063c3b5cb4e14610354578063c6ebe1a3146102705763efa987291461007557600080fd5b61026c57606036600319011261026c5782359267ffffffffffffffff908185116102685736602386011215610268578481013591821161026857602491828601958336918360061b01011161026457823593604435938151956331a9108f60e11b8752858588015260209485888481305afa97881561025a57899861022b575b506001600160a01b03978816330361021d5788979493975b8a8a8683106101a057505050505050845194818187018288525260608601979287905b83821061016757887f7d0eb853e07ab2fb5eb178a43b1fdd8178a2dfd823ab86e5443d9d9d1f20790b89808d8b8b8301520390a180f35b9091929398893582811680910361019c578152858a0135600281101561019c5786820152830198830193929160010190610130565b8980fd5b86828c8c938b9e9a9b6101bd6101b88987819a610452565b610478565b168152888d528181208582528d5220546101fd575b5050505060001981146101eb576001019794939761010d565b634e487b7160e01b8a5260118252838afd5b6102149361020e926101b892610452565b8561048c565b8088878d6101d2565b83516359bc8af160e01b8152fd5b61024c919850863d8811610253575b61024481836103fb565b810190610433565b96386100f5565b503d61023a565b84513d8b823e3d90fd5b8480fd5b8380fd5b5080fd5b5061026c5761027e366103c8565b91958493919351916331a9108f60e11b83528382840152602083602481305afa92831561034a57879361032a575b506001600160a01b0392339084160361031b578385896102cb9361058b565b1561030d57506102fe82847f9517d54ef4f3dd671db94f2d957775bbe942fe549a8b9d3eb24e333629fc81c6979861048c565b8351921682526020820152a180f35b845163057d474760e51b8152fd5b5084516359bc8af160e01b8152fd5b61034391935060203d81116102535761024481836103fb565b91386102ac565b86513d89823e3d90fd5b60208361036c610363366103c8565b9291909161058b565b90519015158152f35b83868692610382366103c8565b9491939060018060a01b03169283885260205260ff8688205416156103bc5782875260208481528688208689528152868820548751908152f35b6394cd5abb60e01b8152fd5b60809060031901126103f65760043590602435906044356001600160a01b03811681036103f6579060643590565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761041d57604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126103f657516001600160a01b03811681036103f65790565b91908110156104625760061b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036103f65790565b604080516331a9108f60e11b8152600481018590526000949193919260209290916001600160a01b03918216918482602481305afa918215610581578892610562575b5082885283855286882086895285528688205490833b1561055e5787516323b872dd60e01b8152306004820152921660248301526044820152868160648183865af1801561034a5761052f575b5060005281528260002091845252812055565b67ffffffffffffffff819792971161054a578552943861051c565b634e487b7160e01b82526041600452602482fd5b8880fd5b61057a919250853d87116102535761024481836103fb565b90386104cf565b87513d8a823e3d90fd5b6001600160a01b03909216600081815260209390935260408320549093919060ff16156105ca5760409383526020528282209082526020522054151590565b6040516394cd5abb60e01b8152600490fdfea26469706673582212201cbb9f1028f64408aee06ee7d5121c44646befb1b5fcfc2ee5875719d16038ba64736f6c63430008120033",
  "libraries": {
    "TokenURIGen": "0x25895db657F15381181c0C1022CA8b217E4b1498"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}