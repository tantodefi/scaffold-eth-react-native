{
  "address": "0x0392e14175A34d80040a4D265AF15676d9d90b06",
  "abi": [],
  "transactionHash": "0xff1227f3c143b5544466900f5ffd0e7290dcd0a4a1d0c40f380f51fafa24f59e",
  "receipt": {
    "to": null,
    "from": "0x7a82bbfD10E3Ce5817dEcC0ee870e17D6853D901",
    "contractAddress": "0x0392e14175A34d80040a4D265AF15676d9d90b06",
    "transactionIndex": 31,
    "gasUsed": "2935282",
    "logsBloom": "0x
    "blockHash": "0x3f7636420eca39afb1ea7dca9831b01dee54e865848373311451c2a06ec32954",
    "transactionHash": "0xff1227f3c143b5544466900f5ffd0e7290dcd0a4a1d0c40f380f51fafa24f59e",
    "logs": [],
    "blockNumber": 5668175,
    "cumulativeGasUsed": "7092067",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c9ae1a05729e49b7a29749fce60cfd7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/metadata/SnowmanMetadata.sol\":\"SnowmanMetadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/dependencies/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    unchecked {\\n      uint256 length = Math.log10(value) + 1;\\n      string memory buffer = new string(length);\\n      uint256 ptr;\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        ptr := add(buffer, add(32, length))\\n      }\\n      while (true) {\\n        ptr--;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n        }\\n        value /= 10;\\n        if (value == 0) break;\\n      }\\n      return buffer;\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(int256 value) internal pure returns (string memory) {\\n    return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    unchecked {\\n      return toHexString(value, Math.log256(value) + 1);\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n\\n  /**\\n   * @dev Returns true if the two strings are equal.\\n   */\\n  function equal(string memory a, string memory b) internal pure returns (bool) {\\n    return keccak256(bytes(a)) == keccak256(bytes(b));\\n  }\\n}\\n\",\"keccak256\":\"0x28fe83522fe04cbcf50a79565ee852ca013759e77956a04cf882d936954fae08\",\"license\":\"MIT\"},\"contracts/libraries/logic/metadata/SnowmanMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { Strings } from \\\"../../../dependencies/Strings.sol\\\";\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\n\\nimport { DataTypes } from \\\"../../types/DataTypes.sol\\\";\\nimport { TokenURIGen } from \\\"../../utils/TokenURIGen.sol\\\";\\nimport { TypeCast } from \\\"../../utils/TypeCast.sol\\\";\\n\\nabstract contract Accessory {\\n\\tfunction renderTokenById(\\n\\t\\tuint256 id\\n\\t) external view virtual returns (string memory);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id\\n\\t) external virtual;\\n}\\n\\nlibrary SnowmanMetadata {\\n\\tusing Strings for uint256;\\n\\tusing Strings for int256;\\n\\n\\tfunction tokenURI(\\n\\t\\tDataTypes.Accessory[] calldata accessories,\\n\\t\\tmapping(address => mapping(uint256 => uint256))\\n\\t\\t\\tstorage s_accessoriesById,\\n\\t\\tDataTypes.Snowman calldata snowman,\\n\\t\\tuint256 tokenId\\n\\t) external view returns (string memory) {\\n\\t\\tstring memory name = string(\\n\\t\\t\\tabi.encodePacked(\\\"Snowman#\\\", tokenId.toString())\\n\\t\\t);\\n\\t\\tstring memory description = \\\"This is a snowman\\\";\\n\\t\\tstring memory image = Base64.encode(\\n\\t\\t\\tbytes(generateSVG(accessories, s_accessoriesById, snowman, tokenId))\\n\\t\\t);\\n\\n\\t\\treturn TokenURIGen.generateSVGTokenURI(name, description, image);\\n\\t}\\n\\n\\tfunction renderSnowman(\\n\\t\\tDataTypes.Snowman calldata snowman\\n\\t) internal pure returns (string memory) {\\n\\t\\tstring memory face = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<path d=\\\"M936 394C936 463.274 868.961 520 785.5 520C702.039 520 635 463.274 635 394C635 324.726 702.039 268 785.5 268C868.961 268 936 324.726 936 394Z\\\" fill=\\\"white\\\" stroke=\\\"#ccc\\\" stroke-width=\\\"4\\\" /> <path d=\\\"M759.13 336.817C759.13 349.926 747.955 360.635 734.065 360.635C720.175 360.635 709 349.926 709 336.817C709 323.709 720.175 313 734.065 313C747.955 313 759.13 323.709 759.13 336.817Z\\\" fill=\\\"#F9F8F8\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\" /> <path d=\\\"M863.389 336.817C863.389 349.926 852.214 360.635 838.324 360.635C824.435 360.635 813.259 349.926 813.259 336.817C813.259 323.709 824.435 313 838.324 313C852.214 313 863.389 323.709 863.389 336.817Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\" />',\\n\\t\\t\\t\\t'<ellipse rx=\\\"16.2906\\\" ry=\\\"14.5159\\\" fill=\\\"#0D0D0D\\\" transform=\\\"translate(',\\n\\t\\t\\t\\t(733 + snowman.eyeOffsetX).toString(),\\n\\t\\t\\t\\t\\\",\\\",\\n\\t\\t\\t\\t(337 + snowman.eyeOffsetY).toString(),\\n\\t\\t\\t\\t')\\\" /><ellipse rx=\\\"16.2906\\\" ry=\\\"14.5159\\\" fill=\\\"#0F0F0F\\\" transform=\\\"translate(',\\n\\t\\t\\t\\t(838 + snowman.eyeOffsetX).toString(),\\n\\t\\t\\t\\t\\\",\\\",\\n\\t\\t\\t\\t(337 + snowman.eyeOffsetY).toString(),\\n\\t\\t\\t\\t')\\\" /> <path d=\\\"M727.53 426.093C717.139 429.791 715.725 433.162 722.28 441.842\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\" /> <path d=\\\"M844 430.671C855.087 437.025 855.507 441.01 848.695 448.669\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\" /> <path d=\\\"M733 434C770.692 452.514 802.237 455.433 838 434\\\" stroke=\\\"black\\\" stroke-width=\\\"5\\\" /> <path d=\\\"M878.688 393.576C880.355 393.878 881.964 394.163 883.507 394.429L772.637 411.249C769.048 403.006 769.05 392.909 770.132 384.422C770.703 379.946 771.56 376.023 772.275 373.22C772.496 372.352 772.703 371.594 772.883 370.961C773.706 371.151 774.739 371.388 775.96 371.668C779.37 372.451 784.25 373.565 790.13 374.894C801.889 377.551 817.651 381.065 833.658 384.492C849.66 387.918 865.927 391.262 878.688 393.576Z\\\" fill=\\\"#D98A2C\\\" stroke=\\\"black\\\" stroke-width=\\\"5\\\" /> <path d=\\\"M837.236 296.02C857.236 296.02 865.236 296.02 880.984 320.452\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" /> <path d=\\\"M724.736 296.316C704.25 300.449 694.485 304.94 686.236 324.52\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring\\n\\t\\t\\tmemory middleBody = '<path d=\\\"M1013.5 649.029C1013.5 691.282 987.978 736.639 947.383 771.531C906.836 806.382 851.567 830.5 792.671 830.5C733.777 830.5 678.927 806.384 638.797 771.539C598.622 736.655 573.5 691.296 573.5 649.029C573.5 607.015 598.344 575.478 638.328 554.312C678.373 533.113 733.347 522.5 792.671 522.5C851.994 522.5 907.388 533.113 947.852 554.317C988.263 575.493 1013.5 607.034 1013.5 649.029Z\\\" fill=\\\"white\\\" stroke=\\\"#ccc\\\" stroke-width=\\\"5\\\" /><line x1=\\\"603.503\\\" y1=\\\"647.354\\\" x2=\\\"410.503\\\" y2=\\\"520.354\\\" stroke=\\\"#562C1F\\\" stroke-width=\\\"20\\\" /><path d=\\\"M416 520V403\\\" stroke=\\\"#562C1F\\\" stroke-width=\\\"20\\\" /><line x1=\\\"410.873\\\" y1=\\\"517.578\\\" x2=\\\"300.873\\\" y2=\\\"550.578\\\" stroke=\\\"#562C1F\\\" stroke-width=\\\"20\\\" /><line x1=\\\"970.06\\\" y1=\\\"638.955\\\" x2=\\\"1142.06\\\" y2=\\\"511.955\\\" stroke=\\\"#562C1F\\\" stroke-width=\\\"20\\\" /><line x1=\\\"1138\\\" y1=\\\"512\\\" x2=\\\"1138\\\" y2=\\\"386\\\" stroke=\\\"#562C1F\\\" stroke-width=\\\"20\\\" /><line x1=\\\"1138.49\\\" y1=\\\"510.012\\\" x2=\\\"1280.49\\\" y2=\\\"517.012\\\" stroke=\\\"#562C1F\\\" stroke-width=\\\"20\\\" />';\\n\\n\\t\\tstring memory lowerBody = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<path d=\\\"M1130.5 1023.52C1130.5 1075.95 1086.79 1130.42 1019.74 1171.96C952.854 1213.41 863.46 1241.5 773.611 1241.5C683.878 1241.5 603.767 1208.97 546.111 1163.12C488.379 1117.2 453.5 1058.22 453.5 1005.48C453.5 953.051 497.212 898.583 564.261 857.038C631.146 815.594 720.54 787.5 810.389 787.5C900.122 787.5 980.233 820.028 1037.89 865.885C1095.62 911.803 1130.5 970.784 1130.5 1023.52Z\\\" fill=\\\"white\\\" stroke=\\\"#ccc\\\" stroke-width=\\\"5\\\" />',\\n\\t\\t\\t\\t'<ellipse cx=\\\"792\\\" cy=\\\"1013\\\" rx=\\\"40\\\" ry=\\\"39\\\" fill=\\\"',\\n\\t\\t\\t\\tsnowman.buttonColor,\\n\\t\\t\\t\\t'\\\" /><ellipse cx=\\\"796.5\\\" cy=\\\"886\\\" rx=\\\"37.5\\\" ry=\\\"39\\\" fill=\\\"',\\n\\t\\t\\t\\tsnowman.buttonColor,\\n\\t\\t\\t\\t'\\\" /><ellipse cx=\\\"791.5\\\" cy=\\\"728.5\\\" rx=\\\"32.5\\\" ry=\\\"34.5\\\" fill=\\\"',\\n\\t\\t\\t\\tsnowman.buttonColor,\\n\\t\\t\\t\\t'\\\" /><ellipse cx=\\\"796\\\" cy=\\\"617\\\" rx=\\\"24\\\" ry=\\\"25\\\" fill=\\\"',\\n\\t\\t\\t\\tsnowman.buttonColor,\\n\\t\\t\\t\\t'\\\" />'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn string(abi.encodePacked(face, middleBody, lowerBody));\\n\\t}\\n\\n\\tfunction renderTokenById(\\n\\t\\tDataTypes.Accessory[] calldata accessories,\\n\\t\\tmapping(address => mapping(uint256 => uint256))\\n\\t\\t\\tstorage s_accessoriesById,\\n\\t\\tDataTypes.Snowman calldata snowman,\\n\\t\\tuint256 tokenId\\n\\t) public view returns (string memory) {\\n\\t\\tstring memory token = renderSnowman(snowman);\\n\\n\\t\\tuint256 numOfAccessories = accessories.length;\\n\\n\\t\\tfor (uint256 i = 0; i < numOfAccessories; i++) {\\n\\t\\t\\tDataTypes.Accessory memory accessory = accessories[i];\\n\\t\\t\\tuint256 accessoryTokenId = s_accessoriesById[accessory._address][\\n\\t\\t\\t\\ttokenId\\n\\t\\t\\t];\\n\\n\\t\\t\\tif (accessoryTokenId > 0) {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\taccessory.position == DataTypes.AccessoryPosition.Foreground\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\ttoken = string(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\ttoken,\\n\\t\\t\\t\\t\\t\\t\\tAccessory(accessory._address).renderTokenById(\\n\\t\\t\\t\\t\\t\\t\\t\\taccessoryTokenId\\n\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttoken = string(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\tAccessory(accessory._address).renderTokenById(\\n\\t\\t\\t\\t\\t\\t\\t\\taccessoryTokenId\\n\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\ttoken\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn token;\\n\\t}\\n\\n\\tfunction generateSVG(\\n\\t\\tDataTypes.Accessory[] calldata accessories,\\n\\t\\tmapping(address => mapping(uint256 => uint256))\\n\\t\\t\\tstorage s_accessoriesById,\\n\\t\\tDataTypes.Snowman calldata snowman,\\n\\t\\tuint256 tokenId\\n\\t) internal view returns (string memory) {\\n\\t\\tstring memory cloud = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<rect x=\\\"1\\\" y=\\\"4\\\" width=\\\"1433\\\" height=\\\"1235\\\" fill=\\\"',\\n\\t\\t\\t\\tsnowman.cloudColor,\\n\\t\\t\\t\\t'\\\" />'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring\\n\\t\\t\\tmemory snowyGround = '<path d=\\\"M2.5 1271.5V870.969C193.505 715.311 403.061 701.422 638.973 733.615C737.077 747.003 839.635 768.343 947.273 790.741C969.306 795.326 991.552 799.955 1014.02 804.569C1145.51 831.577 1284.39 858.057 1431.5 872.057V1271.5H2.5Z\\\" fill=\\\"white\\\" stroke=\\\"#ccc\\\" stroke-width=\\\"5\\\" />';\\n\\n\\t\\t(\\n\\t\\t\\tstring memory snowfallForeground,\\n\\t\\t\\tstring memory snowfallBackground\\n\\t\\t) = generateSnowfall(snowman);\\n\\t\\treturn\\n\\t\\t\\tstring(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t'<svg width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 1453 1274\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n\\t\\t\\t\\t\\tcloud,\\n\\t\\t\\t\\t\\tsnowyGround,\\n\\t\\t\\t\\t\\tsnowfallForeground,\\n\\t\\t\\t\\t\\trenderTokenById(\\n\\t\\t\\t\\t\\t\\taccessories,\\n\\t\\t\\t\\t\\t\\ts_accessoriesById,\\n\\t\\t\\t\\t\\t\\tsnowman,\\n\\t\\t\\t\\t\\t\\ttokenId\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\tsnowfallBackground,\\n\\t\\t\\t\\t\\t\\\"</svg>\\\"\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction generateSnowfall(\\n\\t\\tDataTypes.Snowman calldata snowman\\n\\t) private pure returns (string memory, string memory) {\\n\\t\\tstring memory snowfallForeground0 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<g fill=\\\"white\\\" stroke=\\\"#ccc\\\" stroke-width=\\\"3\\\"><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"3.2s\\\" type=\\\"translate\\\" from=\\\"482 0\\\" to=\\\"',\\n\\t\\t\\t\\t(482 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"4.8s\\\" type=\\\"translate\\\" from=\\\"1204 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1204 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"4.7s\\\" type=\\\"translate\\\" from=\\\"1170 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1170 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tstring memory snowfallForeground1 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"3.8s\\\" type=\\\"translate\\\" from=\\\"1415 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1415 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"4.4s\\\" type=\\\"translate\\\" from=\\\"1400 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1400 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"8.762s\\\" type=\\\"translate\\\" from=\\\"733 0\\\" to=\\\"',\\n\\t\\t\\t\\t(733 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"5.762s\\\" type=\\\"translate\\\" from=\\\"805 0\\\" to=\\\"',\\n\\t\\t\\t\\t(805 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallForeground2 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"3.162s\\\" type=\\\"translate\\\" from=\\\"900 0\\\" to=\\\"',\\n\\t\\t\\t\\t(900 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"9.2s\\\" type=\\\"translate\\\" from=\\\"1085 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1085 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"9.1s\\\" type=\\\"translate\\\" from=\\\"226 0\\\" to=\\\"',\\n\\t\\t\\t\\t(226 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallForeground3 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"4.7s\\\" type=\\\"translate\\\" from=\\\"1009 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1009 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"6.89s\\\" type=\\\"translate\\\" from=\\\"132 0\\\" to=\\\"',\\n\\t\\t\\t\\t(132 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"3.56s\\\" type=\\\"translate\\\" from=\\\"97 0\\\" to=\\\"',\\n\\t\\t\\t\\t(97 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle></g>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallBackground0 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<g fill=\\\"white\\\" stroke=\\\"#ccc\\\" stroke-width=\\\"3\\\"><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"8.236s\\\" type=\\\"translate\\\" from=\\\"504 0\\\" to=\\\"',\\n\\t\\t\\t\\t(504 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"3.982s\\\" type=\\\"translate\\\" from=\\\"1250 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1250 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"4.249s\\\" type=\\\"translate\\\" from=\\\"205 0\\\" to=\\\"',\\n\\t\\t\\t\\t(205 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" />'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallBackground1 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'</circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"7.113s\\\" type=\\\"translate\\\" from=\\\"329 0\\\" to=\\\"',\\n\\t\\t\\t\\t(329 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"3.5s\\\" type=\\\"translate\\\" from=\\\"167 0\\\" to=\\\"',\\n\\t\\t\\t\\t(167 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"4.5s\\\" type=\\\"translate\\\" from=\\\"1124 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1124 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallBackground2 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"4.782s\\\" type=\\\"translate\\\" from=\\\"712 0\\\" to=\\\"',\\n\\t\\t\\t\\t(712 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"7.201s\\\" type=\\\"translate\\\" from=\\\"355 0\\\" to=\\\"',\\n\\t\\t\\t\\t(355 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallBackground3 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"5.289s\\\" type=\\\"translate\\\" from=\\\"1204 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1204 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle><circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"4.892s\\\" type=\\\"translate\\\" from=\\\"596 0\\\" to=\\\"',\\n\\t\\t\\t\\t(596 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallBackground4 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"6.4s\\\" type=\\\"translate\\\" from=\\\"1216 0\\\" to=\\\"',\\n\\t\\t\\t\\t(1216 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallBackground5 = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<circle r=\\\"15.2929\\\"><animateTransform attributeName=\\\"transform\\\" dur=\\\"3.3s\\\" type=\\\"translate\\\" from=\\\"707 0\\\" to=\\\"',\\n\\t\\t\\t\\t(707 + snowman.snowAnimOffsetX).toString(),\\n\\t\\t\\t\\t' 1000\\\" repeatCount=\\\"indefinite\\\" /></circle></g>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallForeground = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tsnowfallForeground0,\\n\\t\\t\\t\\tsnowfallForeground1,\\n\\t\\t\\t\\tsnowfallForeground2,\\n\\t\\t\\t\\tsnowfallForeground3\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tstring memory snowfallBackground = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tsnowfallBackground0,\\n\\t\\t\\t\\tsnowfallBackground1,\\n\\t\\t\\t\\tsnowfallBackground2,\\n\\t\\t\\t\\tsnowfallBackground3,\\n\\t\\t\\t\\tsnowfallBackground4,\\n\\t\\t\\t\\tsnowfallBackground5\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn (snowfallForeground, snowfallBackground);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa583333c1568f0f549d38d53ac58f9c7db322a389d0366c2dc344f09b3c44e3a\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary DataTypes {\\n  enum AccessoryPosition {\\n    Foreground,\\n    Background\\n  }\\n\\n  struct Accessory {\\n    address _address;\\n    AccessoryPosition position;\\n  }\\n\\n  struct Snowman {\\n    int256 eyeOffsetX;\\n    int256 eyeOffsetY;\\n    string cloudColor;\\n    string buttonColor;\\n    int256 snowAnimOffsetX;\\n  }\\n\\n  struct Hat {\\n    string color;\\n  }\\n\\n  struct Scarf {\\n    string color;\\n  }\\n\\n  struct Belt {\\n    string color;\\n  }\\n}\\n\",\"keccak256\":\"0x314f787fec39584c6426fb083fe708b4cd73b0f9df7bac896ed2b836ebf2fe9b\",\"license\":\"MIT\"},\"contracts/libraries/utils/TokenURIGen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\n\\nlibrary TokenURIGen {\\n  function generateSVGTokenURI(\\n    string calldata name,\\n    string calldata description,\\n    string calldata image\\n  ) external pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:applicaton/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                '\\\", \\\"description\\\": \\\"',\\n                description,\\n                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function generateSVGTokenURI(\\n    string calldata name,\\n    string calldata description,\\n    string calldata image,\\n    string calldata attributes\\n  ) external pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:applicaton/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                '\\\", \\\"description\\\": \\\"',\\n                description,\\n                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                image,\\n                '\\\", \\\"attributes\\\": ',\\n                attributes,\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function generateSVGTokenURI(\\n    string calldata name,\\n    string calldata description,\\n    string calldata external_url,\\n    string calldata image,\\n    string calldata attributes\\n  ) external pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:applicaton/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                '\\\", \\\"description\\\": \\\"',\\n                description,\\n                '\\\", \\\"external_url\\\": \\\"',\\n                external_url,\\n                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                image,\\n                '\\\", \\\"attributes\\\": ',\\n                attributes,\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x58db6115126e913c6eba19e5a598b39f4b858bf0488b5f94a807965467d43361\",\"license\":\"MIT\"},\"contracts/libraries/utils/TypeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nerror TypeCast__toUint256_OutOfBounds();\\n\\nlibrary TypeCast {\\n  bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = ALPHABET[value & 0xf];\\n      value >>= 4;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toColor(bytes3 value) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(6);\\n    for (uint256 i = 0; i < 3; i++) {\\n      buffer[i * 2 + 1] = ALPHABET[uint8(value[i]) & 0xf];\\n      buffer[i * 2] = ALPHABET[uint8(value[i] >> 4) & 0xf];\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toUint256(bytes memory _bytes) internal pure returns (uint256) {\\n    if (_bytes.length < 32) revert TypeCast__toUint256_OutOfBounds();\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(_bytes, 0x20))\\n    }\\n\\n    return tempUint;\\n  }\\n}\\n\",\"keccak256\":\"0xd4fdff1d01244722fc086ae66e7b05ea4885e0dcd4bc94747d931445d883e259\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80635d4083d414610125576368d95e7a1461003257600080fd5b6100a4600061009f6100433661015c565b916100528398959694986105cf565b976100916028604051809b67536e6f776d616e2360c01b602083015261008181518092602086860191016101cb565b810103600881018c52018a6102cb565b61009961031c565b96611e5a565b6104dc565b926100c36040519485938493636e14931f60e11b8552600485016103a8565b038173__$630b07a2e356e58e1839af623d98555940$",
  "libraries": {
    "TokenURIGen": "0x25895db657F15381181c0C1022CA8b217E4b1498"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}